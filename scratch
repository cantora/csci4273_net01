BOOST_AUTO_TEST_CASE(tcplisten)
{ 
	struct sockaddr_in sin; 
	char buf[MAX_LINE]; 
	socklen_t len; 
	int s, new_s; 

	/* build address data structure */ 
	bzero((char *)&sin, sizeof(sin)); 
	sin.sin_family = AF_INET; 
	sin.sin_addr.s_addr = INADDR_ANY; 
	sin.sin_port = htons(SERVER_PORT); 

	/* setup passive open */ 
	if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) { 
		perror("socket"); 
		BOOST_REQUIRE(false); 
	} 

	if ((bind(s, (struct sockaddr *)&sin, sizeof(sin))) < 0) { 
		perror("bind"); 
		BOOST_REQUIRE(false); 
	} 

	listen(s, MAX_PENDING); 
	/* wait for connection, then receive and print text */ 

	if ((new_s = accept(s, (struct sockaddr *)&sin, &len)) < 0) { 
		perror("accept"); 
		BOOST_REQUIRE(false); 
	}
	fprintf(stderr, "accepted...\n"); 
	if(len = recv(new_s, buf, sizeof(buf), 0)) 
		fputs(buf, stdout); 

	fprintf(stderr, "close...\n");
	close(new_s); 
	close(s);
}



/*
const session_server::client *session_server::client(int socket) {
	map<int, session_server::client>::const_iterator cli = m_clients.find(socket);
	assert(cli != m_clients.end());

	return &(*cli);
}*/


{
	char c;
	int count = 0;
	int amt;
	char buf[] = "asdf\nasdfasdf";

	cout << "test client" << endl;

	write(1, buf, 5);
	read(1, buf, 5);
	buf[6] = 0x00;

	cout << buf << endl;
}

pollfd cinfd[1];
	char cmd;
	string str;
	int fd_amt = 0;

	cinfd[0].fd = fileno(stdin);
	cinfd[0].events |= POLLIN;

	while(1) {
		if(fd_amt = poll(cinfd, 1, 1000) ) {
			//cout << "poll " << fd_amt << endl;
			if(cinfd[0].revents & POLLIN) {
				exit(1);
			}
		}
